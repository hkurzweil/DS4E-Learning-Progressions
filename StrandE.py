{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b1b2d76e-d160-447b-9904-a16ff327d977",
   "metadata": {},
   "outputs": [],
   "source": [
    "import streamlit as st\n",
    "import pandas as pd\n",
    "\n",
    "# Read just Strand E\n",
    "sheet_id = \"1bnCPKr9nhmWNNq0a8STCY-_bOx9rnu7_CfrPP0LEQ7k\"\n",
    "gid = '223899173'  # This is Strand E's gid\n",
    "url = f\"https://docs.google.com/spreadsheets/d/{sheet_id}/export?format=csv&gid={gid}\"\n",
    "df = pd.read_csv(url)\n",
    "\n",
    "# Set page config\n",
    "st.set_page_config(page_title=\"Data Science Learning Progression - Strand E\", layout=\"wide\")\n",
    "\n",
    "# Clean the data\n",
    "df = df[df['üë¶ Grade-Level'].notna()]  # Remove NaN rows\n",
    "df = df[df['üë¶ Grade-Level'] != '[Drop-down]']  # Remove dropdown placeholder\n",
    "\n",
    "# Title\n",
    "st.title(\"Data Science Learning Progression - Strand E\")\n",
    "\n",
    "# Grade level filter\n",
    "grade_options = [\"All\"] + sorted(df['üë¶ Grade-Level'].unique().tolist())\n",
    "selected_grade = st.selectbox(\"Select Grade Level:\", grade_options)\n",
    "\n",
    "# Filter data based on selected grade\n",
    "if selected_grade != \"All\":\n",
    "    filtered_df = df[df['üë¶ Grade-Level'] == selected_grade]\n",
    "else:\n",
    "    filtered_df = df\n",
    "\n",
    "# Display progression by sub-strand and concept\n",
    "substrand_col = 'E.1 Representations and Dynamic VIsualizations'\n",
    "concept_col = 'Concept Names'\n",
    "\n",
    "for substrand in filtered_df[substrand_col].unique():\n",
    "    st.markdown(f\"## {substrand}\")\n",
    "    substrand_data = filtered_df[filtered_df[substrand_col] == substrand]\n",
    "    \n",
    "    for concept in substrand_data[concept_col].unique():\n",
    "        if pd.notna(concept):  # Check if concept is not NaN\n",
    "            st.markdown(f\"### {concept}\")\n",
    "            concept_data = substrand_data[substrand_data[concept_col] == concept]\n",
    "            \n",
    "            for _, row in concept_data.iterrows():\n",
    "                st.markdown(f\"\"\"\n",
    "                <div style='background-color: #f0f2f6; padding: 10px; border-radius: 5px; margin: 5px 0; color: #000000;'>\n",
    "                    <strong style='color: #1f77b4;'>{row['üë¶ Grade-Level']}</strong>: {row['‚úÖ Students can...']}\n",
    "                </div>\n",
    "                \"\"\", unsafe_allow_html=True)\n",
    "\n",
    "                # If there are things to avoid, display them\n",
    "                if pd.notna(row['‚ùå What to avoid...']):\n",
    "                    st.markdown(f\"\"\"\n",
    "                    <div style='background-color: #ffe6e6; padding: 10px; border-radius: 5px; margin: 5px 0; color: #000000;'>\n",
    "                        <strong style='color: #dc3545;'>What to avoid:</strong> {row['‚ùå What to avoid...']}\n",
    "                    </div>\n",
    "                    \"\"\", unsafe_allow_html=True)\n",
    "\n",
    "# Add some styling\n",
    "st.markdown(\"\"\"\n",
    "    <style>\n",
    "    h2 {\n",
    "        color: #1f77b4 !important;\n",
    "        margin-top: 30px;\n",
    "    }\n",
    "    h3 {\n",
    "        color: #2c3e50 !important;\n",
    "        margin-top: 20px;\n",
    "        font-size: 1.2em;\n",
    "    }\n",
    "    div[data-testid=\"stMarkdown\"] {\n",
    "        color: #000000 !important;\n",
    "    }\n",
    "    </style>\n",
    "    \"\"\", unsafe_allow_html=True)\n",
    "\n",
    "# Add additional information about the lenses if they exist\n",
    "st.sidebar.markdown(\"## Learning Lenses\")\n",
    "lenses = {\n",
    "    \"Problem Cycles & Iteration\": \"üîÑ\",\n",
    "    \"Questioning & Critique\": \"üîç\",\n",
    "    \"Role of Technology\": \"üë©‚Äçüíª\",\n",
    "    \"Social & Cultural Implications\": \"üåé\"\n",
    "}\n",
    "\n",
    "for lens, emoji in lenses.items():\n",
    "    if f\"Lens: {emoji} {lens}\" in filtered_df.columns:\n",
    "        lens_data = filtered_df[f\"Lens: {emoji} {lens}\"].value_counts()\n",
    "        if not lens_data.empty:\n",
    "            st.sidebar.markdown(f\"### {emoji} {lens}\")\n",
    "            st.sidebar.write(lens_data)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
